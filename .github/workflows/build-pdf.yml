name: Create a new PDF for each changed MD file

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: 
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          separator: '='
          files: |
             **.md
          output_renamed_files_as_deleted_and_added: true

      - name: List all modified files
        env:
          ALL_MODIFIED_FILE: ${{ steps.changed-files.outputs.modified_files }}
        run: |
          while IFS= read -r -d$"=" line; do
            line=$(echo $line | sed 's/=//')
            echo "$line" >> modified_files.txt
          done <<< "${ALL_MODIFIED_FILE}"
          echo "$line" >> modified_files.txt
          echo "Modified files: $(cat modified_files.txt)"

      - name: Get deleted files
        id: deleted-files
        uses: tj-actions/changed-files@v42
        with:
          separator: '='
          files: |
             **.md
          output_renamed_files_as_deleted_and_added: true

      - name: List all deleted files
        env:
          ALL_DELETED_FILES: ${{ steps.deleted-files.outputs.deleted_files }}
        run: |
          while IFS= read -r -d$"=" line; do
            echo "$line" >> deleted_files.txt
          done <<< "${ALL_DELETED_FILES}"
          echo "$line" >> deleted_files.txt
          echo "Deleted files: $(cat deleted_files.txt)"

      - name: Get added files
        id: added-files
        uses: tj-actions/changed-files@v42
        with:
          separator: '='
          files: |
             **.md
          output_renamed_files_as_deleted_and_added: true

      - name: List all added files
        env:
          ALL_ADDED_FILES: ${{ steps.added-files.outputs.added_files }}
        run: |
          while IFS= read -r -d$"=" line; do
            line=$(echo $line | sed 's/=//')
            echo "$line" >> added_files.txt
          done <<< "${ALL_ADDED_FILES}"
          echo "$line" >> added_files.txt
          echo "Added files: $(cat added_files.txt)"

      - name: Install pandoc
        run: |
          sudo apt-get update
          sudo apt-get install pandoc
          sudo apt-get install texlive-latex-recommended
          sudo apt-get install texlive-xetex  

      - name: Convert each modified MD file to PDF
        run: |
          while IFS= read -r file; do
            if [[ $file == *.md ]]; then
              echo "Converting $file to PDF"
              mkdir -p pdf/$(dirname $file)
              echo | pandoc -H "../tools/head.tex" --pdf-engine=xelatex "$file" -o "pdf/${file%.md}.pdf" -s -V fontsize=12pt -V geometry:"top=2cm, bottom=1.5cm, left=2cm, right=2cm" --resource-path="z_images"
            fi
          done < modified_files.txt
          rm modified_files.txt

      - name: Remove PDFs for deleted MD files
        run: |
          while IFS= read -r file; do
            if [[ $file == *.md ]]; then
              echo "Removing pdf/${file%.md}.pdf"
              rm -f "pdf/${file%.md}.pdf"
              rmdir --ignore-fail-on-non-empty "pdf/$(dirname $file)"
            fi
          done < deleted_files.txt
          rm deleted_files.txt

      - name: Convert each added MD file to PDF
        run: |
          while IFS= read -r file; do
            if [[ $file == *.md ]]; then
              echo "Converting $file to PDF"
              mkdir -p pdf/$(dirname $file)
              echo | pandoc -H "../tools/head.tex" --pdf-engine=xelatex "$file" -o "pdf/${file%.md}.pdf" -s -V fontsize=12pt -V geometry:"top=2cm, bottom=1.5cm, left=2cm, right=2cm" --resource-path="z_images"
            fi
          done < added_files.txt
          rm added_files.txt

      - name: Commit and push PDFs
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config --global user.email "actions@github.com"
            git config --global user.name "GitHub Actions"
            git add pdf/**/*
            git commit -m "Add generated PDFs"
            git push
          else
            echo "No PDFs to commit."
          fi
        shell: bash